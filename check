#!/usr/bin/perl
use strict;
use File::Which qw(which);

my $PERL_VERSION = 5.01;
my $PROGRAM = 'parties';


##
## Check for perl version
##
if ( $] && $] < $PERL_VERSION ) {
  system( "clear" );
  print "$PROGRAM should be used with perl $PERL_VERSION or higher.\n"
      . "Perl $] is being used to run check.";
  print "\n\n\n<PRESS ENTER TO CONTINUE>\n";
  my $answer = <STDIN>;
}


##
## Check for program dependencies
##

my @PROGRAM_DEP = qw(velveth velvetg gzip bowtie2 samtools RepeatMasker blat muscle);

foreach my $program (@PROGRAM_DEP) {
   my ($path) = which($program);
   if($path) {
      print STDERR "Check $program ... OK ($path)\n";
   } else {
      print STDERR "Check $program ... Not installed\n";
      exit;
   }
   
}


##
## Check for perl module dependencies
##

my %MODULE_DEPENDENCIES = (
		'Bio::Root::Version' => '1.006001', # Bioperl
		'Getopt::Long' => 0, # Get parameters
		'Parallel::ForkManager' => '0.7.9', # multi thread fork manager
		'Bio::GFF3::LowLevel' => '1.5',	
		'Statistics::R' => '0.30',
		'Bio::DB::Sam' => '1.37',
		'Time::HiRes' => '1.9721',
		'List::MoreUtils' => '0.33'
  		);

my @MISSING_MODULES;

foreach my $module ( keys %MODULE_DEPENDENCIES ) {
  if ( !eval "require " . $module . ";" ) {
    print STDERR "Check $module ... Not installed\n";
    push @MISSING_MODULES,$module;
  } elsif(inferior($module->VERSION , $MODULE_DEPENDENCIES{$module})) {   
    print STDERR "Check $module ... installed ".$module->VERSION." but need version $MODULE_DEPENDENCIES{$module}\n";    
    push @MISSING_MODULES,$module;
  } else {
      print STDERR "Check $module ... OK (version=".$module->VERSION.")\n";
   }
}
if ( @MISSING_MODULES ) {
  print "\nThe following perl modules required by $PROGRAM "
      . "are missing from\nyour system.  Please install these or "
      . "or upgrade your perl version\nto $PERL_VERSION.x first:\n    "
      . join( "\n    ", @MISSING_MODULES ) . "\n";
  exit;
}



print STDERR "All prerequisites are OK\n";


sub inferior {
   my ($vers_inst,$vers_min) = @_;
   $vers_inst=~s/^v//;   
   return 0 if($vers_inst >= $vers_min);
   return 1;
}
